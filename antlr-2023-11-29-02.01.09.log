2023-11-29 02:01:09:421 grammar LogManager.java:25 before: (COMBINED_GRAMMAR hphGramatica (RULES (RULE program (BLOCK (ALT (+ (BLOCK (ALT statement))) EOF))) (RULE statement (BLOCK (ALT atr ENDL) (ALT dec ENDL) (ALT cond) (ALT repet) (ALT print ENDL))) (RULE expl (BLOCK (ALT (BLOCK (ALT ID) (ALT NUM)) (+ (BLOCK (ALT OPC (BLOCK (ALT ID) (ALT NUM)))))) (ALT (BLOCK (ALT ID) (ALT BOOL)) (+ (BLOCK (ALT OPL (BLOCK (ALT ID) (ALT BOOL)))))))) (RULE exp (BLOCK (ALT (BLOCK (ALT ID) (ALT NUM)) (* (BLOCK (ALT OPA (BLOCK (ALT ID) (ALT NUM)))))))) (RULE dec (BLOCK (ALT TIPO (BLOCK (ALT ID) (ALT atr))))) (RULE atr (BLOCK (ALT ID ATR (BLOCK (ALT exp) (ALT expl) (ALT STRING))))) (RULE cond (BLOCK (ALT IF AP expl FP AC (* (BLOCK (ALT statement))) FC (? (BLOCK (ALT ELSE AC (* (BLOCK (ALT statement))) FC)))))) (RULE repet (BLOCK (ALT WHILE AP expl FP AC (* (BLOCK (ALT statement))) FC))) (RULE print (BLOCK (ALT PRINT AP (BLOCK (ALT ID) (ALT NUM)) FP))) (RULE TIPO (BLOCK (ALT 'int') (ALT 'real') (ALT 'string') (ALT 'bool'))) (RULE ATR (BLOCK (ALT '='))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE AC (BLOCK (ALT '{'))) (RULE FC (BLOCK (ALT '}'))) (RULE OPA (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/') (ALT '%'))) (RULE OPL (BLOCK (ALT '||') (ALT '&&'))) (RULE OPC (BLOCK (ALT '>') (ALT '<') (ALT '=='))) (RULE ENDL (BLOCK (ALT ';'))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT DIGITO) (ALT LETRA)))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT DIGITO))) (? (BLOCK (ALT ',' (+ (BLOCK (ALT DIGITO))))))))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT LETRA) (ALT NUM))) '\''))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGITO (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\t\n])))) skip)))))
2023-11-29 02:01:09:438 grammar LogManager.java:25 after: (COMBINED_GRAMMAR hphGramatica (RULES (RULE program (BLOCK (ALT (+ (BLOCK (ALT statement))) EOF))) (RULE statement (BLOCK (ALT atr ENDL) (ALT dec ENDL) (ALT cond) (ALT repet) (ALT print ENDL))) (RULE expl (BLOCK (ALT (SET ID NUM) (+ (BLOCK (ALT OPC (SET ID NUM))))) (ALT (SET ID BOOL) (+ (BLOCK (ALT OPL (SET ID BOOL))))))) (RULE exp (BLOCK (ALT (SET ID NUM) (* (BLOCK (ALT OPA (SET ID NUM))))))) (RULE dec (BLOCK (ALT TIPO (BLOCK (ALT ID) (ALT atr))))) (RULE atr (BLOCK (ALT ID ATR (BLOCK (ALT exp) (ALT expl) (ALT STRING))))) (RULE cond (BLOCK (ALT IF AP expl FP AC (* (BLOCK (ALT statement))) FC (? (BLOCK (ALT ELSE AC (* (BLOCK (ALT statement))) FC)))))) (RULE repet (BLOCK (ALT WHILE AP expl FP AC (* (BLOCK (ALT statement))) FC))) (RULE print (BLOCK (ALT PRINT AP (SET ID NUM) FP))) (RULE TIPO (BLOCK (ALT 'int') (ALT 'real') (ALT 'string') (ALT 'bool'))) (RULE ATR (BLOCK (ALT '='))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE AC (BLOCK (ALT '{'))) (RULE FC (BLOCK (ALT '}'))) (RULE OPA (BLOCK (ALT (SET '+' '-' '*' '/' '%')))) (RULE OPL (BLOCK (ALT '||') (ALT '&&'))) (RULE OPC (BLOCK (ALT '>') (ALT '<') (ALT '=='))) (RULE ENDL (BLOCK (ALT ';'))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT DIGITO) (ALT LETRA)))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT DIGITO))) (? (BLOCK (ALT ',' (+ (BLOCK (ALT DIGITO))))))))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT LETRA) (ALT NUM))) '\''))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGITO (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\t\n])))) skip)))))
2023-11-29 02:01:09:458 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR hphGramatica (RULES (RULE program (BLOCK (ALT (+ (BLOCK (ALT statement))) EOF))) (RULE statement (BLOCK (ALT atr ENDL) (ALT dec ENDL) (ALT cond) (ALT repet) (ALT print ENDL))) (RULE expl (BLOCK (ALT (SET ID NUM) (+ (BLOCK (ALT OPC (SET ID NUM))))) (ALT (SET ID BOOL) (+ (BLOCK (ALT OPL (SET ID BOOL))))))) (RULE exp (BLOCK (ALT (SET ID NUM) (* (BLOCK (ALT OPA (SET ID NUM))))))) (RULE dec (BLOCK (ALT TIPO (BLOCK (ALT ID) (ALT atr))))) (RULE atr (BLOCK (ALT ID ATR (BLOCK (ALT exp) (ALT expl) (ALT STRING))))) (RULE cond (BLOCK (ALT IF AP expl FP AC (* (BLOCK (ALT statement))) FC (? (BLOCK (ALT ELSE AC (* (BLOCK (ALT statement))) FC)))))) (RULE repet (BLOCK (ALT WHILE AP expl FP AC (* (BLOCK (ALT statement))) FC))) (RULE print (BLOCK (ALT PRINT AP (SET ID NUM) FP)))))
2023-11-29 02:01:09:459 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR hphGramaticaLexer (RULES (RULE TIPO (BLOCK (ALT 'int') (ALT 'real') (ALT 'string') (ALT 'bool'))) (RULE ATR (BLOCK (ALT '='))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE AC (BLOCK (ALT '{'))) (RULE FC (BLOCK (ALT '}'))) (RULE OPA (BLOCK (ALT (SET '+' '-' '*' '/' '%')))) (RULE OPL (BLOCK (ALT '||') (ALT '&&'))) (RULE OPC (BLOCK (ALT '>') (ALT '<') (ALT '=='))) (RULE ENDL (BLOCK (ALT ';'))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT DIGITO) (ALT LETRA)))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT DIGITO))) (? (BLOCK (ALT ',' (+ (BLOCK (ALT DIGITO))))))))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT LETRA) (ALT NUM))) '\''))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGITO (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\t\n])))) skip)))))
2023-11-29 02:01:09:713 semantics LogManager.java:25 tokens={EOF=-1, TIPO=1, ATR=2, AP=3, FP=4, AC=5, FC=6, OPA=7, OPL=8, OPC=9, ENDL=10, BOOL=11, IF=12, ELSE=13, WHILE=14, PRINT=15, ID=16, NUM=17, STRING=18, WS=19}
2023-11-29 02:01:09:713 semantics LogManager.java:25 strings={'='=2, '('=3, ')'=4, '{'=5, '}'=6, ';'=10, 'if'=12, 'else'=13, 'while'=14, 'print'=15}
2023-11-29 02:01:09:720 LL1 LogManager.java:25 
DECISION 0 in rule program
2023-11-29 02:01:09:722 LL1 LogManager.java:25 look=[{1, 12, 14..16}, <EOF>]
2023-11-29 02:01:09:722 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:722 LL1 LogManager.java:25 
DECISION 1 in rule statement
2023-11-29 02:01:09:722 LL1 LogManager.java:25 look=[16, 1, 12, 14, 15]
2023-11-29 02:01:09:722 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:722 LL1 LogManager.java:25 
DECISION 2 in rule expl
2023-11-29 02:01:09:722 LL1 LogManager.java:25 look=[9, {4, 10}]
2023-11-29 02:01:09:722 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:722 LL1 LogManager.java:25 
DECISION 3 in rule expl
2023-11-29 02:01:09:722 LL1 LogManager.java:25 look=[8, {4, 10}]
2023-11-29 02:01:09:722 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:723 LL1 LogManager.java:25 
DECISION 4 in rule expl
2023-11-29 02:01:09:723 LL1 LogManager.java:25 look=[{16..17}, {11, 16}]
2023-11-29 02:01:09:723 LL1 LogManager.java:25 LL(1)? false
2023-11-29 02:01:09:723 LL1 LogManager.java:25 
DECISION 5 in rule exp
2023-11-29 02:01:09:723 LL1 LogManager.java:25 look=[7, 10]
2023-11-29 02:01:09:723 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:723 LL1 LogManager.java:25 
DECISION 6 in rule dec
2023-11-29 02:01:09:723 LL1 LogManager.java:25 look=[16, 16]
2023-11-29 02:01:09:723 LL1 LogManager.java:25 LL(1)? false
2023-11-29 02:01:09:723 LL1 LogManager.java:25 
DECISION 7 in rule atr
2023-11-29 02:01:09:723 LL1 LogManager.java:25 look=[{16..17}, {11, 16..17}, 18]
2023-11-29 02:01:09:723 LL1 LogManager.java:25 LL(1)? false
2023-11-29 02:01:09:723 LL1 LogManager.java:25 
DECISION 8 in rule cond
2023-11-29 02:01:09:723 LL1 LogManager.java:25 look=[{1, 12, 14..16}, 6]
2023-11-29 02:01:09:723 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:723 LL1 LogManager.java:25 
DECISION 9 in rule cond
2023-11-29 02:01:09:723 LL1 LogManager.java:25 look=[{1, 12, 14..16}, 6]
2023-11-29 02:01:09:723 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:724 LL1 LogManager.java:25 
DECISION 10 in rule cond
2023-11-29 02:01:09:724 LL1 LogManager.java:25 look=[13, {<EOF>, 1, 6, 12, 14..16}]
2023-11-29 02:01:09:724 LL1 LogManager.java:25 LL(1)? true
2023-11-29 02:01:09:724 LL1 LogManager.java:25 
DECISION 11 in rule repet
2023-11-29 02:01:09:724 LL1 LogManager.java:25 look=[{1, 12, 14..16}, 6]
2023-11-29 02:01:09:724 LL1 LogManager.java:25 LL(1)? true
